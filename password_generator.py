# -*- coding: utf-8 -*-
"""password_generator.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jYgJSDxDd5lLLWVCpDK8kOJBmXtfKZ6T
"""

import random
import string

def generate_password(length, character_sets):
    characters = "".join(character_sets)

    password = "".join(random.choice(characters) for _ in range(length))
    password_list = list(password)
    random.shuffle(password_list)
    password = "".join(password_list)

    return password

def create_password():
    while True:
        password_length = input("Enter the desired password length: ")
        
        if not password_length.isdigit():
            print("Invalid input. Please enter a numeric value for the password length.")
            continue
        
        password_length = int(password_length)
        
        character_sets = []
        
        use_letters = input("Include letters? (yes/no): ").lower()
        if use_letters == "yes":
            character_sets.append(string.ascii_letters)
        
        use_numbers = input("Include numbers? (yes/no): ").lower()
        if use_numbers == "yes":
            character_sets.append(string.digits)
        
        use_special_chars = input("Include special characters? (yes/no): ").lower()
        if use_special_chars == "yes":
            character_sets.append(string.punctuation)

        if not character_sets:
            print("No character sets selected. Please select at least one.")
            continue

        password = generate_password(password_length, character_sets)
        print("Generated Password:", password)

        strength = check_password_strength(password)
        print("Password Strength:", strength)

        response = input("Is the generated password okay? (yes/no): ").lower()

        if response != "yes":
            continue
        
        break

def check_password_strength(password):
    # Criteria for password strength
    length_requirement = 8
    uppercase_requirement = True
    lowercase_requirement = True
    numbers_requirement = True
    special_chars_requirement = True

    strength = 0

    # Check length
    if len(password) >= length_requirement:
        strength += 1

    # Check uppercase characters
    if uppercase_requirement and any(char.isupper() for char in password):
        strength += 1

    # Check lowercase characters
    if lowercase_requirement and any(char.islower() for char in password):
        strength += 1

    # Check numbers
    if numbers_requirement and any(char.isdigit() for char in password):
        strength += 1

    # Check special characters
    if special_chars_requirement and any(char in string.punctuation for char in password):
        strength += 1

    return strength

create_password()